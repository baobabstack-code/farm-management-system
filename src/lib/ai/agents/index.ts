import { createGoogleAIService } from "../google-ai-service";
import { weatherService } from "../../services/weather";

export interface ADKChatContext {
  userId: string;
  message: string;
  conversationHistory: Array<{ role: "user" | "assistant"; content: string }>;
  crops: any[];
  activities: any[];
}

export interface ADKChatResult {
  success: boolean;
  content: string;
  model?: string;
  reasoning?: string;
  usage?: { inputTokens?: number; outputTokens?: number };
  error?: string;
}

/**
 * Real Google AI ADK integration using Gemini API
 * Provides intelligent farming assistance with context awareness
 */
export async function getChatResponseFromADK(
  context: ADKChatContext
): Promise<ADKChatResult> {
  try {
    const enabled =
      process.env.AI_ADK_ENABLED === "true" || process.env.GOOGLE_AI_API_KEY;

    // If ADK isn't enabled, short-circuit with a clear message
    if (!enabled) {
      return {
        success: false,
        content: "",
        error:
          "AI ADK is not enabled. Set AI_ADK_ENABLED=true or provide GOOGLE_AI_API_KEY to activate.",
      };
    }

    // Create Google AI service instance
    const googleAI = createGoogleAIService();

    if (!googleAI) {
      // Fallback to simulation if Google AI is not available
      console.warn(
        "Google AI service not available, falling back to simulation"
      );
      return await simulateGoogleAICall(context);
    }

    // Get weather context if available
    let weatherContext = null;
    try {
      // TODO: Replace 0,0 with actual farm/user coordinates if available
      const weatherResult = await weatherService.getWeatherInsights(0, 0);
      if (weatherResult && weatherResult.currentConditions) {
        weatherContext = weatherResult.currentConditions;
      }
    } catch (error) {
      console.warn("Could not fetch weather context:", error);
    }

    // Build farm context for Google AI
    const farmContext = {
      userId: context.userId,
      crops: context.crops || [],
      activities: context.activities || [],
      weather: weatherContext,
      location: "Farm location", // Could be enhanced with user's actual location
    };

    // Convert conversation history to Google AI format
    const conversationHistory = context.conversationHistory.map((msg) => ({
      role: msg.role === "assistant" ? ("model" as const) : ("user" as const),
      parts: [msg.content],
    }));

    // Generate response using real Google AI
    const response = await googleAI.generateChatResponse(
      context.message,
      farmContext,
      conversationHistory
    );

    if (response.success) {
      return {
        success: true,
        content: response.content,
        model: response.model,
        reasoning: "Response generated by Google AI Gemini",
        usage: {
          inputTokens: response.usage?.promptTokenCount || 0,
          outputTokens: response.usage?.candidatesTokenCount || 0,
        },
      };
    } else {
      console.error("Google AI API error:", response.error);
      // Fallback to simulation on API error
      return await simulateGoogleAICall(context);
    }
  } catch (err: any) {
    console.error("ADK call error:", err);

    // Fallback to simulation on any error
    try {
      return await simulateGoogleAICall(context);
    } catch {
      return {
        success: false,
        content: "",
        error: err?.message || "ADK call failed",
      };
    }
  }
}

function summarizeCrops(crops: any[]): string {
  if (!crops?.length) return "Crops: none tracked yet.";
  const types = [...new Set(crops.map((c) => c.name))];
  const overdue = crops.filter(
    (c) =>
      new Date(c.expectedHarvestDate) < new Date() && c.status !== "HARVESTED"
  );
  return `Crops: ${crops.length} total; Types: ${types.join(", ")}; Overdue to harvest: ${overdue.length}.`;
}

function summarizeActivities(activities: any[]): string {
  if (!activities?.length) return "Activities: none logged yet.";
  const byType = activities.reduce((acc: any, a: any) => {
    acc[a.type] = (acc[a.type] || 0) + 1;
    return acc;
  }, {});
  const top = Object.entries(byType)
    .sort(([, a]: any, [, b]: any) => b - a)
    .slice(0, 3)
    .map(([t, c]) => `${t}:${c}`)
    .join(", ");
  return `Activities (last window): ${activities.length}; Top: ${top}.`;
}

/**
 * Simulate Google AI call as fallback
 */
async function simulateGoogleAICall(
  context: ADKChatContext
): Promise<ADKChatResult> {
  // Build context summary
  // eslint-disable-next-line @typescript-eslint/no-unused-vars
  const cropSummary = summarizeCrops(context.crops);
  // eslint-disable-next-line @typescript-eslint/no-unused-vars
  const activitySummary = summarizeActivities(context.activities);

  // Generate contextual response
  const response = generatePlaceholderResponse(
    context.message,
    context.crops,
    context.activities
  );

  return {
    success: true,
    content: response,
    model: "gemini-simulation",
    reasoning: "Simulated response - real Google AI not available",
    usage: {
      inputTokens: context.message.length / 4,
      outputTokens: response.length / 4,
    },
  };
}

function generatePlaceholderResponse(
  message: string,
  crops: any[],
  activities: any[]
): string {
  const msg = message.toLowerCase();

  // Weather and watering queries
  if (
    msg.includes("weather") ||
    msg.includes("water") ||
    msg.includes("irrigat")
  ) {
    return "üå¶Ô∏è **Weather & Watering Guidance**\n\nBased on current conditions:\n‚Ä¢ Check soil moisture 2-3 inches deep\n‚Ä¢ Water early morning (6-8 AM) or evening (6-8 PM)\n‚Ä¢ If rain expected, reduce irrigation\n‚Ä¢ Focus on newly planted crops and containers\n\nüí° **Pro tip:** Use mulch to retain moisture and reduce watering frequency.";
  }

  // Harvest queries
  if (msg.includes("harvest") || msg.includes("ready")) {
    const overdueCount = crops.filter(
      (c) =>
        new Date(c.expectedHarvestDate) < new Date() && c.status !== "HARVESTED"
    ).length;
    const upcomingCount = crops.filter((c) => {
      const daysUntil = Math.ceil(
        (new Date(c.expectedHarvestDate).getTime() - Date.now()) /
          (1000 * 60 * 60 * 24)
      );
      return daysUntil >= 0 && daysUntil <= 7;
    }).length;

    let response = "üåæ **Harvest Status Update**\n\n";

    if (overdueCount > 0) {
      response += `‚ö†Ô∏è **Urgent:** ${overdueCount} crop(s) overdue for harvest\n‚Ä¢ Harvest immediately for best quality\n‚Ä¢ Use clean, sharp tools\n‚Ä¢ Harvest in early morning when cool\n\n`;
    }

    if (upcomingCount > 0) {
      response += `üìÖ **Coming up:** ${upcomingCount} crop(s) ready within 7 days\n‚Ä¢ Prepare storage containers\n‚Ä¢ Plan harvest schedule\n‚Ä¢ Check market prices\n\n`;
    }

    response +=
      "üîç **Daily check:** Look for signs of ripeness, pest damage, or weather stress.";
    return response;
  }

  // Cost and financial queries
  if (
    msg.includes("cost") ||
    msg.includes("budget") ||
    msg.includes("expense") ||
    msg.includes("money")
  ) {
    const totalCost = activities.reduce((sum, a) => sum + (a.cost || 0), 0);
    const avgMonthlyCost = totalCost / Math.max(1, activities.length / 10);

    return `üí∞ **Cost Analysis & Optimization**\n\n**Current spending:**\n‚Ä¢ Total tracked costs: $${totalCost.toFixed(2)}\n‚Ä¢ Average monthly: $${avgMonthlyCost.toFixed(2)}\n\n**Optimization tips:**\n‚Ä¢ Buy supplies in bulk for 15-20% savings\n‚Ä¢ Track cost per crop for ROI analysis\n‚Ä¢ Focus on high-cost categories first\n‚Ä¢ Consider DIY solutions for common tasks\n\nüìä Use the Financial Analytics for detailed insights.`;
  }

  // Pest and disease queries
  if (
    msg.includes("pest") ||
    msg.includes("disease") ||
    msg.includes("bug") ||
    msg.includes("sick")
  ) {
    return "üêõ **Pest & Disease Management**\n\n**Prevention first:**\n‚Ä¢ Inspect crops daily, especially leaf undersides\n‚Ä¢ Maintain proper spacing for air circulation\n‚Ä¢ Remove diseased plant material immediately\n‚Ä¢ Encourage beneficial insects with diverse plantings\n\n**Common warning signs:**\n‚Ä¢ Holes in leaves (caterpillars, beetles)\n‚Ä¢ Yellowing/wilting (root issues, diseases)\n‚Ä¢ Sticky honeydew (aphids)\n‚Ä¢ White powdery coating (powdery mildew)\n\nüåø **Organic solutions:** Neem oil, insecticidal soap, companion planting";
  }

  // Soil and fertilizer queries
  if (
    msg.includes("soil") ||
    msg.includes("fertiliz") ||
    msg.includes("compost") ||
    msg.includes("nutrients")
  ) {
    return "üå± **Soil Health & Nutrition**\n\n**Soil basics:**\n‚Ä¢ Test pH (most crops prefer 6.0-7.0)\n‚Ä¢ Check drainage - no standing water\n‚Ä¢ Add organic matter regularly\n\n**Fertilizing guide:**\n‚Ä¢ Spring: Balanced fertilizer (10-10-10)\n‚Ä¢ Growing season: Higher nitrogen for leafy crops\n‚Ä¢ Pre-harvest: Reduce nitrogen, increase phosphorus\n\nüçÇ **Composting:** Kitchen scraps + yard waste = free fertilizer in 3-6 months";
  }

  // Planting and crop selection
  if (
    msg.includes("plant") ||
    msg.includes("seed") ||
    msg.includes("grow") ||
    msg.includes("crop")
  ) {
    const season = getCurrentSeason();
    return `üå± **Planting Guide for ${season}**\n\n**Best practices:**\n‚Ä¢ Start with easy crops: lettuce, radishes, herbs\n‚Ä¢ Follow spacing guidelines on seed packets\n‚Ä¢ Plant at proper depth (2-3x seed diameter)\n‚Ä¢ Keep soil consistently moist until germination\n\n**${season} recommendations:**\n${getSeasonalPlantingTips(season)}\n\nüéØ Check the Crop Recommendations for personalized suggestions!`;
  }

  // General farming advice
  if (msg.includes("help") || msg.includes("advice") || msg.includes("tip")) {
    return "üöú **General Farming Tips**\n\n**Daily habits:**\n‚Ä¢ Morning crop inspection walk\n‚Ä¢ Check soil moisture regularly\n‚Ä¢ Document observations and activities\n\n**Weekly tasks:**\n‚Ä¢ Deep watering session\n‚Ä¢ Weed management\n‚Ä¢ Harvest ready produce\n\n**Monthly planning:**\n‚Ä¢ Review crop performance\n‚Ä¢ Plan succession plantings\n‚Ä¢ Soil health assessment\n\n‚ùì **Ask specific questions** for more targeted advice!";
  }

  // Default response
  return `ü§ñ **AI Farm Assistant Ready!**\n\n**I can help you with:**\n‚Ä¢ üåæ Harvest timing and techniques\n‚Ä¢ üíß Watering and irrigation schedules\n‚Ä¢ üå± Crop care and plant health\n‚Ä¢ üí∞ Cost analysis and budgeting\n‚Ä¢ üêõ Pest and disease management\n‚Ä¢ üå¶Ô∏è Weather-based recommendations\n\n**Try asking:**\n‚Ä¢ "When should I harvest my tomatoes?"\n‚Ä¢ "How often should I water this week?"\n‚Ä¢ "What are my highest farm costs?"\n‚Ä¢ "Any pest concerns I should watch for?"\n\nWhat would you like to know about your farm?`;
}

function getCurrentSeason(): string {
  const month = new Date().getMonth();
  if (month >= 2 && month <= 4) return "Spring";
  if (month >= 5 && month <= 7) return "Summer";
  if (month >= 8 && month <= 10) return "Fall";
  return "Winter";
}

function getSeasonalPlantingTips(season: string): string {
  const tips: Record<string, string> = {
    Spring:
      "‚Ä¢ Cool-season crops: lettuce, spinach, peas, carrots\n‚Ä¢ Start warm-season seedlings indoors\n‚Ä¢ Prepare beds with compost",
    Summer:
      "‚Ä¢ Heat-tolerant varieties of lettuce and spinach\n‚Ä¢ Succession plant every 2-3 weeks\n‚Ä¢ Focus on pest monitoring",
    Fall: "‚Ä¢ Second round of cool-season crops\n‚Ä¢ Plant garlic and onions\n‚Ä¢ Extend season with row covers",
    Winter:
      "‚Ä¢ Plan next year's garden\n‚Ä¢ Order seeds and supplies\n‚Ä¢ Maintain tools and equipment",
  };
  return tips[season] || "‚Ä¢ Adjust planting based on local climate conditions";
}
